// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatSession {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model ChatUser {
  id       Int           @id @default(autoincrement())
  name     String
  email    String        @unique
  password String
  token    String?
  role     ChatRole      @default(USER)
  messages ChatMessage[]
  rooms    ChatRoom[]
  
  // Friends list (one-directional)
  friends       ChatFriendship[]  @relation("UserFriends")
  friendOf      ChatFriendship[]  @relation("FriendOf")
}

model ChatFriendship {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  user       ChatUser  @relation("UserFriends", fields: [userId], references: [id])
  userId     Int
  friend     ChatUser  @relation("FriendOf", fields: [friendId], references: [id])
  friendId   Int
  
  @@unique([userId, friendId])
}

model ChatRoom {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  author    ChatUser       @relation(fields: [authorId], references: [id])
  authorId  Int
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  body       String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  author     ChatUser  @relation(fields: [authorId], references: [id])
  authorId   Int
  @@index([authorId])
  @@index([chatRoomId])
}

enum ChatRole {
  ADMIN
  USER
}